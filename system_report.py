# system_report.py
import asyncio
import datetime
import logging
import platform
import subprocess

import psutil

logger = logging.getLogger("system_report")

SYSTEMCTL_PATH = "/usr/bin/systemctl"  # which systemctl


def format_uptime(td):
    days = td.days
    hours, remainder = divmod(td.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    return f"{days}d {hours}h {minutes}m {seconds}s"


def bytes_to_human_readable(num_bytes):
    for unit in ["B", "KiB", "MiB", "GiB", "TiB"]:
        if num_bytes < 1024.0:
            return f"{num_bytes:.1f} {unit}"
        num_bytes /= 1024.0
    return f"{num_bytes:.1f} PiB"


def check_service(service_name):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        result = subprocess.run(
            [SYSTEMCTL_PATH, "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            timeout=5,
        )
        status = result.stdout.strip()
        if not status:
            status = result.stderr.strip()

        # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        status_translations = {
            "active": "–∞–∫—Ç–∏–≤–µ–Ω",
            "inactive": "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω",
            "failed": "–æ—à–∏–±–∫–∞",
            "activating": "–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è",
            "deactivating": "–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è",
        }

        translated_status = status_translations.get(status, status)
        return f"{service_name}: {translated_status}"
    except subprocess.TimeoutExpired:
        return f"{service_name}: —Ç–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–∏—Å–∞ {service_name}: {e}")
        return f"{service_name}: –æ—à–∏–±–∫–∞ ({str(e)[:30]})"


async def get_docker_containers():
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö"""
    try:
        result = subprocess.run(
            [
                "/usr/bin/docker",
                "stats",
                "--no-stream",
                "--format",
                "{{.Name}}|{{.Container}}|{{.CPUPerc}}|{{.MemUsage}}|{{.MemPerc}}|{{.RunningFor}}",
            ],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            timeout=15,
        )

        if result.returncode != 0:
            if "command not found" in result.stderr:
                return "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            elif "Cannot connect" in result.stderr:
                return "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω"
            else:
                return f"–û—à–∏–±–∫–∞ Docker stats: {result.stderr.strip()}"

        containers = []
        for line in result.stdout.strip().split("\n"):
            if line.strip():
                parts = line.split("|")
                if len(parts) >= 6:
                    name = parts[0]
                    container_id = parts[1]
                    cpu_percent = parts[2].strip()
                    mem_usage = parts[3].strip()
                    mem_percent = parts[4].strip()
                    running_for = parts[5].strip()

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
                    container_info = f"‚Ä¢ {name} ({container_id}), CPU: {cpu_percent}, RAM: {mem_usage} ({mem_percent}), {running_for}"
                    containers.append(container_info)

        if not containers:
            return "–ù–µ—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"

        return "\n".join(containers)

    except subprocess.TimeoutExpired:
        return "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Docker stats. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å."


async def main(tgkey=None, chatID=None):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
        uname = platform.uname()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∞–ø—Ç–∞–π–º–∞
        try:
            boot_time = datetime.datetime.fromtimestamp(psutil.boot_time())
            uptime = datetime.datetime.now() - boot_time
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            boot_time = "N/A"
            uptime = "N/A"

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CPU
        try:
            cpu_percent = psutil.cpu_percent(interval=1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ CPU: {e}")
            cpu_percent = "N/A"

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏
        try:
            mem = psutil.virtual_memory()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏: {e}")
            mem = type("obj", (object,), {"percent": "N/A", "used": 0})()

        try:
            swap = psutil.swap_memory()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ swap: {e}")
            swap = type("obj", (object,), {"percent": "N/A", "used": 0})()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ
        try:
            disk = psutil.disk_usage("/")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ: {e}")
            disk = type("obj", (object,), {"percent": "N/A", "used": 0})()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        net_usage = "N/A"
        try:
            net1 = psutil.net_io_counters()
            await asyncio.sleep(1)
            net2 = psutil.net_io_counters()
            bytes_sent = net2.bytes_sent - net1.bytes_sent
            bytes_recv = net2.bytes_recv - net1.bytes_recv
            net_usage = (
                f"‚¨ÜÔ∏è {bytes_to_human_readable(bytes_sent)}/s | "
                f"‚¨áÔ∏è {bytes_to_human_readable(bytes_recv)}/s"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ç–µ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
        docker_info = await get_docker_containers()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        alerts = []
        if isinstance(cpu_percent, (int, float)) and cpu_percent > 85:
            alerts.append("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU!")
        if isinstance(mem.percent, (int, float)) and mem.percent > 90:
            alerts.append("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM!")
        if isinstance(disk.percent, (int, float)) and disk.percent > 90:
            alerts.append("‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ!")

        alert_text = "\n".join(alerts) if alerts else "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤ –Ω–æ—Ä–º–µ"

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
        proc_info = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö"
        try:
            for p in psutil.process_iter():
                try:
                    p.cpu_percent(interval=None)
                except Exception:
                    pass
            await asyncio.sleep(1)
            procs = []
            for p in psutil.process_iter(
                ["pid", "name", "cpu_percent", "memory_percent"]
            ):
                try:
                    procs.append(p)
                except Exception:
                    pass
            top_procs = sorted(
                procs, key=lambda p: p.info["cpu_percent"], reverse=True
            )[:5]

            proc_info = "\n".join(
                f"‚Äî *{p.info['name']:<20}* "  # –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é, 20 —Å–∏–º–≤–æ–ª–æ–≤
                f"(PID `{p.info['pid']:>5}`)  "  # PID, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é, 5 —Å–∏–º–≤–æ–ª–æ–≤
                f"CPU: `{p.info['cpu_percent']:>5.1f}%`  "  # CPU, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é, 5 —Å–∏–º–≤–æ–ª–æ–≤
                f"RAM: `{p.info['memory_percent']:>5.1f}%`"  # RAM, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é, 5 —Å–∏–º–≤–æ–ª–æ–≤
                for p in top_procs
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö: {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        services_to_check = ["ssh", "nginx", "docker"]
        services_status = "\n".join(check_service(s) for s in services_to_check)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = (
            "üñ•Ô∏è *–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞*\n"
            "========================\n"
            f"‚Ä¢ –•–æ—Å—Ç: `{uname.node}`\n"
            f"‚Ä¢ –û–°: `{uname.system} {uname.release}`\n"
            f"‚Ä¢ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: `{boot_time if isinstance(boot_time, str) else boot_time.strftime('%Y-%m-%d %H:%M:%S')}`\n"
            f"‚Ä¢ –ê–ø—Ç–∞–π–º: `{uptime if isinstance(uptime, str) else format_uptime(uptime)}`\n"
            "------------------------\n"
            f"*CPU*: `{cpu_percent}%`\n"
            f"*RAM*: `{mem.percent if hasattr(mem, 'percent') else 'N/A'}%` "
            f" ({bytes_to_human_readable(mem.used) if hasattr(mem, 'used') else 'N/A'})\n"
            f"*Swap*: `{swap.percent if hasattr(swap, 'percent') else 'N/A'}%` "
            f" ({bytes_to_human_readable(swap.used) if hasattr(swap, 'used') else 'N/A'})\n"
            f"*–î–∏—Å–∫*: `{disk.percent if hasattr(disk, 'percent') else 'N/A'}%` "
            f" ({bytes_to_human_readable(disk.used) if hasattr(disk, 'used') else 'N/A'})\n"
            f"*–°–µ—Ç—å*: {net_usage}\n"
            "------------------------\n"
            f"*–°—Ç–∞—Ç—É—Å:*\n{alert_text}\n"
            "------------------------\n"
            "*–ü—Ä–æ—Ü–µ—Å—Å—ã:*\n"
            f"{proc_info}\n"
            "------------------------\n"
            "*–°–µ—Ä–≤–∏—Å—ã:*\n"
            f"{services_status}\n"
            "------------------------\n"
            "*Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:*\n"
            f"{docker_info}\n"
            "========================"
        )
        logger.info("–°–∏—Å—Ç–µ–º–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")
        return message

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞."


if __name__ == "__main__":
    asyncio.run(main())
