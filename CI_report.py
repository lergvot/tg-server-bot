# CI_report.py
import logging

from fastapi import FastAPI, HTTPException, Request
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–ø–ª–æ—è
_last_deploy_report = None


def get_last_deploy_report():
    return _last_deploy_report


def create_bot_server(tg_token: str, chat_id: str, ci_secret: str) -> FastAPI:
    app = FastAPI()
    bot = Bot(token=tg_token)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
    logger = logging.getLogger("ci_report")
    if not logger.hasHandlers():
        logger.setLevel(logging.INFO)
        handler = logging.StreamHandler()
        formatter = logging.Formatter("[%(asctime)s] [%(levelname)s] %(message)s")
        handler.setFormatter(formatter)
        logger.addHandler(handler)

    def get_str_field(data: dict, field: str, fallback: str) -> str:
        return str(data.get(field, fallback)).strip() or fallback

    def add_status_emoji(status: str) -> str:
        status = status.lower()
        if "success" in status:
            return f"‚úÖ {status}"
        elif "fail" in status or "error" in status:
            return f"‚ùå {status}"
        return status

    @app.get("/health", tags=["system"])
    async def health():
        return {"status": "ok"}

    @app.post("/ci-report", tags=["system"])
    async def ci_report(request: Request):
        data = await request.json()
        if data.get("secret") != ci_secret:
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–æ–º.")
            raise HTTPException(status_code=403, detail="Forbidden")

        project = get_str_field(data, "project", "<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç>")
        workflow = get_str_field(data, "workflow", "<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π workflow>")
        author = get_str_field(data, "author", "<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä>")
        branch = get_str_field(data, "branch", "<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–µ—Ç–∫–∞>")
        status = add_status_emoji(get_str_field(data, "status", "<–Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞>"))
        commit = get_str_field(data, "commit", "")[:7] or "<–Ω–µ—Ç –∫–æ–º–º–∏—Ç–∞>"
        commit_msg = get_str_field(data, "message", "‚Äî")
        commit_msg = (
            commit_msg.replace(":", ":\n", 1) if ":" in commit_msg else commit_msg
        )
        event_name = get_str_field(data, "event_name", "<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ>")
        url = get_str_field(data, "url", "https://example.com")
        repo_url = get_str_field(data, "repo_url", "https://example.com")

        text = (
            f"üõ∞ <b>CI-–û—Ç—á—ë—Ç</b>\n\n"
            f"<b>üì¶ –ü—Ä–æ–µ–∫—Ç:</b> <code>{project}</code>\n"
            f"<b>üõ† Workflow:</b> <code>{workflow}</code>\n"
            f"<b>üë§ –ê–≤—Ç–æ—Ä:</b> {author}\n"
            f"<b>üåø –í–µ—Ç–∫–∞:</b> <code>{branch}</code>\n"
            f"<b>üìä –°—Ç–∞—Ç—É—Å:</b> {status}\n"
            f"<b>üî¢ –ö–æ–º–º–∏—Ç:</b> <code>{commit}</code>\n"
            f"<b>üìù –°–æ–æ–±—â–µ–Ω–∏–µ:</b> {commit_msg}\n"
            f"<b>‚öôÔ∏è –°–æ–±—ã—Ç–∏–µ:</b> <code>{event_name}</code>"
        )

        buttons = [
            [
                InlineKeyboardButton("üîç –õ–æ–≥ –ø–∞–π–ø–ª–∞–π–Ω–∞", url=url),
                InlineKeyboardButton("üìÇ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", url=repo_url),
            ]
        ]
        markup = InlineKeyboardMarkup(buttons)

        try:
            await bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode="HTML",
                reply_markup=markup,
            )
            logger.info(f"–û—Ç—á—ë—Ç –æ CI –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {project} | {branch} | {status}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–ø–ª–æ–π –≤ main —Å —É—Å–ø–µ—à–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            if branch == "main" and "‚úÖ" in status:
                global _last_deploy_report
                _last_deploy_report = text

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

        return {"ok": True}

    return app
