name: Deploy Telegram Bot

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.3'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # pip install pytest

      - name: Run tests
        run: |
          # –¢–µ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º pytest
          echo "No tests to run yet, skipping pytest"

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.3'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/TelegramServerBot
      
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
            systemctl stop tgbot.service || true
            [ -f tg_bot.log ] && rm tg_bot.log
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
            git fetch origin main --depth=1
            git reset --hard FETCH_HEAD
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            source venv/bin/activate
            python -m pip install --upgrade pip
            pip install -r requirements.txt --no-cache-dir
            
            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
            systemctl start tgbot.service
            echo "‚úÖ Deployment completed"
            
      - name: Wait for FastAPI to be healthy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ FastAPI (http://127.0.0.1:8001/health)..."
            for i in {1..15}; do
              sleep 2
              if curl -s --fail http://127.0.0.1:8001/health > /dev/null; then
                echo "‚úÖ FastAPI –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ /health"
                exit 0
              fi
              echo "‚è≥ –û–∂–∏–¥–∞–µ–º /health... ($i/15)"
            done
            echo "‚ùå FastAPI –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤–æ–≤—Ä–µ–º—è"
            exit 1

      - name: Set CI status env
        run: echo "STATUS=‚úÖ –£—Å–ø–µ—à–Ω–æ" >> $GITHUB_ENV

      - name: Prepare CI payload
        id: prepare_payload
        run: |
          echo "–°–æ–∑–¥–∞—ë–º JSON –¥–ª—è CI-—Ä–µ–ø–æ—Ä—Ç–∞"
          echo '{
            "secret": "'"${{ secrets.CI_SECRET }}"'",
            "project": "'"${{ github.repository }}"'",
            "status": "'"$STATUS"'",
            "commit": "'"$(git rev-parse --short HEAD)"'",
            "author": "'"${{ github.actor }}"'",
            "branch": "'"${{ github.ref_name }}"'",
            "workflow": "'"${{ github.workflow }}"'",
            "event_name": "'"${{ github.event_name }}"'",
            "message": "'"${{ github.event.head_commit.message }}"'",
            "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "repo_url": "https://github.com/${{ github.repository }}"
          }' > ci_payload.json
          echo "payload_file=ci_payload.json" >> $GITHUB_OUTPUT

      - name: Send CI Report to Telegram Bot
        env:
          CI_ENDPOINT: ${{ secrets.CI_ENDPOINT }}
        run: |
          echo "üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CI-–æ—Ç—á—ë—Ç..."
          PAYLOAD_FILE="${{ steps.prepare_payload.outputs.payload_file }}"
          echo "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª: $PAYLOAD_FILE"
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$CI_ENDPOINT" \
            -H "Content-Type: application/json" \
            -d @"$PAYLOAD_FILE")

          echo "HTTP_CODE=$HTTP_CODE"
          if [[ "$HTTP_CODE" -ne 200 ]]; then
            echo "::warning::CI report failed with HTTP $HTTP_CODE"
            exit 1
          else
            echo "‚úÖ CI-–æ—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: $HTTP_CODE"
          fi
