name: Deploy Telegram Bot

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy pipeline
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy to server
        id: deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: TGKEY,CHATID,GEMINI_KEY,CI_SECRET
          script: |
            export TGKEY="${{ secrets.TGKEY }}"
            export CHATID="${{ secrets.CHATID }}"
            export GEMINI_KEY="${{ secrets.GEMINI_KEY }}"
            export CI_SECRET="${{ secrets.CI_SECRET }}"

            cd /opt/tg-server-bot

            echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ main"
            git fetch origin main --depth=1
            git reset --hard FETCH_HEAD
            git clean -xfd

            echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
            docker compose -f Docker/docker-compose.yml down --remove-orphans

            echo "–°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫..."
            docker compose -f Docker/docker-compose.yml up -d --build

            sleep 10
            echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
            if ! docker compose -f Docker/docker-compose.yml ps --services --filter status=running | grep -q "tg-server-bot"; then
              echo "‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å tg-server-bot –Ω–µ –∑–∞–ø—É—â–µ–Ω"
              exit 1
            fi

            if ! docker compose -f Docker/docker-compose.yml ps --services --filter status=running | grep -q "nginx"; then
              echo "‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å nginx –Ω–µ –∑–∞–ø—É—â–µ–Ω"
              exit 1
            fi

            echo "‚úÖ Deployment completed"

      - name: Wait for FastAPI to be healthy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ FastAPI (http://127.0.0.1:8001/health)..."
            for i in {1..30}; do
              sleep 2
              response=$(curl -s -X GET http://127.0.0.1:8001/health)
              if echo "$response" | grep -q '"status":"ok"'; then
                echo "‚úÖ FastAPI –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ /health"
                echo "–û—Ç–≤–µ—Ç: $response"
                exit 0
              fi
              echo "‚è≥ –û–∂–∏–¥–∞–µ–º /health... ($i/30)"
            done
            echo "‚ùå FastAPI –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤–æ–≤—Ä–µ–º—è"
            exit 1

      - name: Set CI status env
        run: echo "STATUS=‚úÖ –£—Å–ø–µ—à–Ω–æ" >> $GITHUB_ENV

      - name: Prepare CI payload
        id: prepare_payload
        run: |
          echo "–°–æ–∑–¥–∞—ë–º JSON –¥–ª—è CI-—Ä–µ–ø–æ—Ä—Ç–∞"
          COMMIT_MSG="$(git log -1 --pretty=%B)"
          echo '{
            "secret": "'"${{ secrets.CI_SECRET }}"'",
            "project": "'"${{ github.repository }}"'",
            "status": "'"$STATUS"'",
            "commit": "'"$(git rev-parse --short HEAD)"'",
            "author": "'"${{ github.actor }}"'",
            "branch": "'"${{ github.ref_name }}"'",
            "workflow": "'"${{ github.workflow }}"'",
            "event_name": "'"${{ github.event_name }}"'",
            "message": "'"$COMMIT_MSG"'",
            "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "repo_url": "https://github.com/${{ github.repository }}"
          }' > ci_payload.json
          echo "payload_file=ci_payload.json" >> $GITHUB_OUTPUT

      - name: Send CI Report to Telegram Bot
        env:
          CI_ENDPOINT: ${{ secrets.CI_ENDPOINT }}
        run: |
          echo "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º CI-–æ—Ç—á—ë—Ç..."
          PAYLOAD_FILE="${{ steps.prepare_payload.outputs.payload_file }}"
          echo "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª: $PAYLOAD_FILE"
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$CI_ENDPOINT" \
            -H "Content-Type: application/json" \
            -d @"$PAYLOAD_FILE")

          echo "HTTP_CODE=$HTTP_CODE"
          if [[ "$HTTP_CODE" -ne 200 ]]; then
            echo "::warning::CI report failed with HTTP $HTTP_CODE"
            exit 1
          else
            echo "‚úÖ CI-–æ—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: $HTTP_CODE"
          fi
