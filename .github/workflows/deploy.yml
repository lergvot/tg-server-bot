# deploy.yml
name: Deploy Telegram Bot

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.3'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run tests
        run: |
          # Запускаем тесты, если упадут — workflow тоже упадёт (по умолчанию)
          # pytest -v --disable-warnings
          # Тестов пока нет, поэтому просто выводим сообщение
          echo "No tests to run yet, skipping pytest"

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: test  # Запускается только если job test прошёл успешно

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.3'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.10  # Зафиксировали стабильную версию action
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/TelegramServerBot
            git reset --hard HEAD
            git clean -fd
            git pull origin main --force
            source venv/bin/activate
            python -m pip install --upgrade pip
            pip install -r requirements.txt --no-cache-dir
            systemctl restart tgbot.service
            echo "Deployment completed"

      - name: Set CI status env
        # Явно задаём переменную статуса, чтобы не было undefined
        run: echo "STATUS=✅ Успешно" >> $GITHUB_ENV

      - name: Prepare CI payload
        id: prepare_payload
        run: |
          echo "Creating JSON payload for CI report"
          echo '{
            "secret": "'"${{ secrets.CI_SECRET }}"'",
            "project": "'"${{ github.repository }}"'",
            "status": "'"$STATUS"'",
            "commit": "'"$(git rev-parse --short HEAD)"'",
            "author": "'"${{ github.actor }}"'",
            "branch": "'"${{ github.ref_name }}"'",
            "workflow": "'"${{ github.workflow }}"'",
            "event_name": "'"${{ github.event_name }}"'",
            "message": "'"${{ github.event.head_commit.message }}"'",
            "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "repo_url": "https://github.com/${{ github.repository }}"
          }' > ci_payload.json
          echo "::set-output name=payload_file::ci_payload.json"

      - name: Send CI Report to Telegram Bot
        env:
          CI_ENDPOINT: ${{ secrets.CI_ENDPOINT }}
        run: |
          curl -X POST "$CI_ENDPOINT" \
            -H "Content-Type: application/json" \
            -d @"${{ steps.prepare_payload.outputs.payload_file }}"

